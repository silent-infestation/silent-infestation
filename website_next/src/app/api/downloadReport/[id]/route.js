import { NextResponse } from "next/server";
import { parse } from "cookie";
import jwt from "jsonwebtoken";
import { PrismaClient } from "@prisma/client";
import { jsPDF } from "jspdf";
import fs from "fs";
import path from "path";

import {
  generateSummaryReport,
  findingToRecommendation,
  securityResources,
} from "@/scripts/audit/utils/findings";

const prisma = new PrismaClient();
const JWT_SECRET = process.env.JWT_SECRET || "default-secret";

const getLogoBase64 = () => {
  const filePath = path.join(process.cwd(), "public", "images/logo.jpg");
  const imageBuffer = fs.readFileSync(filePath);
  return imageBuffer.toString("base64");
};

export async function GET(req, context) {
  const { id } = await context.params;
  const cookieHeader = req.headers.get("cookie") || "";
  const cookies = parse(cookieHeader);
  const token = cookies.token;

  if (!token) return NextResponse.json({ error: "Missing JWT token" }, { status: 401 });

  const scanId = parseInt(id);
  if (isNaN(scanId)) return NextResponse.json({ error: "Invalid scan ID" }, { status: 400 });

  try {
    const decoded = jwt.verify(token, JWT_SECRET);
    const userId = decoded.id;
    if (!userId) throw new Error("Invalid token");

    const scan = await prisma.scan.findUnique({
      where: { id: scanId },
      include: {
        scanResult: {
          include: {
            crawledUrls: true,
            findings: true,
          },
        },
      },
    });

    if (!scan || scan.userId !== userId || !scan.scanResult) {
      return NextResponse.json({ error: "Unauthorized access" }, { status: 403 });
    }

    const { crawledUrls, findings } = scan.scanResult;
    const recommendationReport = generateSummaryReport(
      findings,
      findingToRecommendation,
      securityResources
    );

    const doc = new jsPDF();
    const pageHeight = doc.internal.pageSize.height;
    const pageWidth = doc.internal.pageSize.width;
    const logoBase64 = getLogoBase64();

    let y = 50;
    const bottomMargin = 20;
    let pageNumber = 1;

    const softBlack = [51, 51, 51];

    const header = () => {
      doc.addImage(logoBase64, "PNG", 10, 10, 15, 15);
    };

    const footer = () => {
      doc.setFontSize(9);
      doc.setTextColor(...softBlack);
      doc.text(`Page ${pageNumber}`, pageWidth - 20, pageHeight - 10);
    };

    const newPage = () => {
      if (pageNumber > 1) doc.addPage();
      doc.setFillColor(248, 242, 226);
      doc.rect(0, 0, pageWidth, pageHeight, "F");
      header();
      footer();
      y = 50;
      pageNumber++;
    };

    const writeWrapped = (text, size = 11, spacing = 6, options = {}) => {
      const { font = "courier", weight = "normal", color = softBlack, maxWidth = 180 } = options;

      doc.setFont(font, weight);
      doc.setFontSize(size);
      doc.setTextColor(...color);

      const lines = doc.splitTextToSize(text, maxWidth);
      lines.forEach((line) => {
        if (y + spacing > pageHeight - bottomMargin) newPage();
        doc.text(line, 15, y);
        y += spacing;
      });

      doc.setTextColor(...softBlack);
      doc.setFont("courier", "normal");
    };

    const writeHyperlink = (label, url, size = 11, spacing = 6, maxWidth = 180) => {
      doc.setFont("courier", "normal");
      doc.setFontSize(size);
      const lines = doc.splitTextToSize(label, maxWidth);
      lines.forEach((line) => {
        if (y + spacing > pageHeight - bottomMargin) {
          newPage();
          doc.setFont("courier", "normal");
          doc.setFontSize(size);
        }
        doc.setTextColor(0, 0, 255);
        doc.textWithLink(line, 15, y, { url });
        y += spacing;
      });
      doc.setTextColor(...softBlack);
    };

    // Cover Page
    doc.setFillColor(248, 242, 226);
    doc.rect(0, 0, pageWidth, pageHeight, "F");
    header();
    doc.setFont("helvetica", "bold");
    doc.setFontSize(24);
    doc.setTextColor(...softBlack);
    doc.text("Security Scan Report", pageWidth / 2, pageHeight / 2 - 30, { align: "center" });

    doc.setFont("times", "normal");
    doc.setFontSize(14);
    doc.text(`Scan Date: ${scan.scannedAt.toLocaleString()}`, pageWidth / 2, pageHeight / 2 + 14, {
      align: "center",
    });

    doc.setFont("courier", "normal");
    doc.setFontSize(12);
    doc.text("Generated by SilentInfestation3™", pageWidth / 2, pageHeight - 30, {
      align: "center",
    });
    footer();
    pageNumber++;

    // Crawled URLs
    newPage();
    writeWrapped("Crawled URLs", 14, 8, { font: "times", weight: "bold" });
    crawledUrls.forEach(({ url }) => writeHyperlink(url, url));

    // Findings
    newPage();
    writeWrapped("Security Findings", 14, 8, { font: "times", weight: "bold" });
    const confidenceOrder = { high: 1, medium: 2, low: 3 };
    findings.sort((a, b) => confidenceOrder[a.confidence] - confidenceOrder[b.confidence]);
    findings.forEach((f) => {
      const isCritical = f.severity === "high" || f.severity === "critical";
      writeWrapped(`• ${f.type.toUpperCase()} (${f.severity})`, 12, 6, {
        font: "courier",
        weight: isCritical ? "bold" : "normal",
        color: isCritical ? [139, 0, 0] : softBlack,
      });
      writeHyperlink(`  ${f.url}`, f.url);
      writeWrapped(`  Detail: ${f.detail}`, 11, 5);
      writeWrapped(`  Confidence: ${f.confidence}`, 10, 5, {
        font: "courier",
        weight: "italic",
      });
      y += 4;
    });

    // Recommendations
    newPage();
    writeWrapped("Recommendations", 14, 8, { font: "times", weight: "bold" });
    const severityOrder = { Critique: 1, Haute: 2, Moyenne: 3, Faible: 4 };
    recommendationReport.recommendations.sort(
      (a, b) => severityOrder[a.priority] - severityOrder[b.priority]
    );
    recommendationReport.recommendations.forEach((r) => {
      const isHigh = r.priority === "Haute" || r.priority === "Critique";
      writeWrapped(`• (${r.priority}) ${r.text}`, 11, 6, {
        font: "courier",
        weight: isHigh ? "bold" : "normal",
        color: isHigh ? [0, 0, 128] : softBlack,
      });
    });

    // Resources
    newPage();
    writeWrapped("Resources", 14, 8, { font: "times", weight: "bold" });
    Object.entries(recommendationReport.resources).forEach(([category, resources]) => {
      writeWrapped(`• ${category}:`, 12, 7, { font: "times", weight: "bold" });
      resources.forEach((res) => {
        writeWrapped(`   - ${res.title}: ${res.description}`, 10, 5);
        writeHyperlink(`     ${res.url}`, res.url);
      });
      y += 2;
    });

    const pdfBuffer = doc.output("arraybuffer");
    return new NextResponse(Buffer.from(pdfBuffer), {
      headers: {
        "Content-Type": "application/pdf",
        "Content-Disposition": `attachment; filename="security-report-${scanId}.pdf"`,
      },
    });
  } catch (err) {
    console.error("PDF generation error:", err);
    return NextResponse.json({ error: "Unauthorized or failed to generate PDF" }, { status: 401 });
  }
}
